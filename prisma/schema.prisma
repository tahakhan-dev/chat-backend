datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

//*************** USER LEVEL ***************//
model User {
  id              String        @id @default(uuid())
  email           String?       @unique
  blocked         Boolean       @default(false)
  gcm             GCM[]
  role            Role          @default(USER) // One role 
  encryption      Encryption?
  profile         Profile? // One profile (optional) 
  friendRequested Friends[]     @relation("Requested") // Containing other users IDS
  friendedBy      Friends[]     @relation("FriendBy") // Containing my ID with other users
  blockedUsers    BlockedList[] @relation("BlockedUser") // Containing other users IDS
  blockedMe       BlockedList[] @relation("BlockedBy") // Containing my ID with other users
  images          Images[]
  eventsOwned     Event[]       @relation("EventsOwned") // Containing my ID with events
  event           Event[]
  roomsOwned      Room[]        @relation("RoomsOwned") // Containing my ID with rooms
  roomsAdmin      Room[]        @relation("RoomsAdmin")
  rooms           Room[]        @relation("RoomsMember")
  folder          Folder[]      @relation("FolderOwner")
  folderConnected Folder[]      @relation("FolderConnect")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Encryption {
  id        String   @id @default(uuid())
  pub       String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GCM {
  id       String  @unique
  platform String
  user     User?   @relation(fields: [userId], references: [id]) // One user (optional)
  userId   String?
}

model Profile {
  phoneNo             String    @unique
  firstName           String?
  lastName            String?
  city                String?
  country             String?
  birthday            DateTime?
  birthYearVisibility Boolean   @default(true)
  approved            Boolean   @default(false)
  about               String?
  profileImage        String?   @default("https://res.cloudinary.com/weavemasology/image/upload/v1623680410/images/user_wghiyv.png")
  locationRange       Int       @default(10) // Noted in KM
  locationVisibility  Boolean   @default(true) // Let other users see my location
  user                User      @relation(fields: [userId], references: [id]) // Belongs to user
  userId              String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@id([userId])
}

enum Role {
  USER
  ADMIN
}

//*************** IMAGES LEVEL ***************//
model Images {
  id           String     @id @default(uuid())
  cloudinaryId String
  path         String
  position     Position?
  type         ImageTypes @default(USER)
  room         Room?      @relation(fields: [roomId], references: [id])
  roomId       String?
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum ImageTypes {
  USER
  CHAT
}

enum Position {
  LEFT
  RIGHT
  MIDDLE
}

//*************** CONNECTIONS LEVEL ***************//
model Friends {
  id        String   @id @default(uuid())
  user      User     @relation(name: "FriendBy", fields: [userId], references: [id])
  userId    String
  friend    User     @relation(name: "Requested", fields: [friendId], references: [id])
  friendId  String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockedList {
  id        String   @id @default(uuid())
  blocked   User     @relation(name: "BlockedUser", fields: [blockedId], references: [id])
  blockedId String
  user      User     @relation(name: "BlockedBy", fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

//*************** Event LEVEL ***************//
model Event {
  id           String    @id @default(uuid())
  title        String
  description  String
  from         DateTime
  to           DateTime
  owner        User      @relation(name: "EventsOwned", fields: [userId], references: [id])
  userId       String
  members      User[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  location     Location? @relation(fields: [locationLat, locationLong], references: [lat, long])
  locationLat  Float?
  locationLong Float?
}

model Location {
  address String
  lat     Float
  long    Float
  event   Event[]

  @@id([lat, long])
}

//*************** Chats LEVEL ***************//
model Room {
  id          String   @id @default(uuid())
  name        String
  description String
  image       Images? // One image row (optional)
  owner       User     @relation(name: "RoomsOwned", fields: [userId], references: [id])
  userId      String
  admins      User[]   @relation("RoomsAdmin")
  members     User[]   @relation("RoomsMember")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Folder      Folder?  @relation(fields: [folderId], references: [id])
  folderId    String?
}

// model Folder {
//   id        String   @id @default(uuid())
//   name      String
//   owner     User     @relation("FolderOwner", fields: [userId], references: [id])
//   userId    String
//   group     Room[]
//   user      User[]   @relation("FolderConnect")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Folder {
  id        String   @id @default(uuid())
  name      String
  owner     User     @relation("FolderOwner", fields: [userId], references: [id])
  userId    String
  group     Room[]
  user      User[]   @relation("FolderConnect")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
